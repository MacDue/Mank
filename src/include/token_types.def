#define TOK_MULTI_CHAR 256

/* Basic elements */
SEMICOLON = ';',
COLON = ':',
DOT = '.',
LEFT_BRACE = '{',
RIGHT_BRACE = '}',
LEFT_PAREN = '(',
RIGHT_PAREN = ')',
ASSIGN = '=',

/* Operators */
PLUS = '+',
MINUS = '-',
DIVIDE = '/',
TIMES = '*',
MODULO = '%',
LESS_THAN = '<',
GREATER_THAN = '>',
BITWISE_NOT = '~',
BITWISE_AND = '&',
BITWISE_OR = '|',
LOGICAL_NOT = TOK_MULTI_CHAR + 0,
BITWISE_XOR = TOK_MULTI_CHAR + 1,
LOGICAL_OR = TOK_MULTI_CHAR + 2,
LEFT_SHIFT = TOK_MULTI_CHAR + 3,
RIGHT_SHIFT = TOK_MULTI_CHAR + 4,
GREATER_EQUAL = TOK_MULTI_CHAR + 5,
LESS_EQUAL = TOK_MULTI_CHAR + 6,
EQUAL_TO = TOK_MULTI_CHAR + 7,
NOT_EQUAL_TO = TOK_MULTI_CHAR + 8,
LOGICAL_AND = TOK_MULTI_CHAR + 9,

/* Assigment operators */
PLUS_EQUAL = TOK_MULTI_CHAR + 10,
MINUS_EQUAL = TOK_MULTI_CHAR + 11,
LOGICAL_OR_EQUAL = TOK_MULTI_CHAR + 12,
BITWISE_OR_EQUAL = TOK_MULTI_CHAR + 13,
BITWISE_AND_EQUAL = TOK_MULTI_CHAR + 14,
DIVIDE_EQUAL = TOK_MULTI_CHAR + 15,
TIMES_EQUAL = TOK_MULTI_CHAR + 16,
MODULO_EQUAL = TOK_MULTI_CHAR + 17,

/* Keywords / identifiers */
IDENT = TOK_MULTI_CHAR + 18,
DOMAIN = TOK_MULTI_CHAR + 19,
OF = TOK_MULTI_CHAR + 20,
FUNCTION = TOK_MULTI_CHAR + 21,
PROCEDURE = TOK_MULTI_CHAR + 22,
SPAWN = TOK_MULTI_CHAR + 23,
FOR = TOK_MULTI_CHAR + 24,
WHILE = TOK_MULTI_CHAR + 25,
UNTIL = TOK_MULTI_CHAR + 26,
IF = TOK_MULTI_CHAR + 27,
ELSE = TOK_MULTI_CHAR + 28,
POD = TOK_MULTI_CHAR + 29,
RETURN = TOK_MULTI_CHAR + 30,
LITERAL = TOK_MULTI_CHAR + 31,
IN = TOK_MULTI_CHAR + 32,

/* Lexer state */
LEX_EOF = -1,
EMPTY = -2,
INVALID = -3,
