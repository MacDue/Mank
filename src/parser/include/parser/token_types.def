/* Basic elements */
SEMICOLON = ';',
COLON = ':',
DOT = '.',
LEFT_BRACE = '{',
RIGHT_BRACE = '}',
LEFT_PAREN = '(',
RIGHT_PAREN = ')',
ASSIGN = '=',
COMMA = ',',
LEFT_SQUARE_BRACKET = '[',
RIGHT_SQUARE_BRACKET = ']',
BACKSLASH = '\\',
EXCLAMATION_MARK = '!',

/* Operators */
#include "operators.def"

/* Assigment operators */
PLUS_EQUAL = TOK_MULTI_CHAR + 10,
MINUS_EQUAL = TOK_MULTI_CHAR + 11,
LOGICAL_OR_EQUAL = TOK_MULTI_CHAR + 12,
BITWISE_OR_EQUAL = TOK_MULTI_CHAR + 13,
BITWISE_AND_EQUAL = TOK_MULTI_CHAR + 14,
DIVIDE_EQUAL = TOK_MULTI_CHAR + 15,
TIMES_EQUAL = TOK_MULTI_CHAR + 16,
MODULO_EQUAL = TOK_MULTI_CHAR + 17,

/* Keywords / identifiers */
IDENT = TOK_MULTI_CHAR + 18,
DOMAIN = TOK_MULTI_CHAR + 19,
OF = TOK_MULTI_CHAR + 20,
FUNCTION = TOK_MULTI_CHAR + 21,
PROCEDURE = TOK_MULTI_CHAR + 22,
SPAWN = TOK_MULTI_CHAR + 23,
FOR = TOK_MULTI_CHAR + 24,
WHILE = TOK_MULTI_CHAR + 25,
UNTIL = TOK_MULTI_CHAR + 26,
IF = TOK_MULTI_CHAR + 27,
ELSE = TOK_MULTI_CHAR + 28,
POD = TOK_MULTI_CHAR + 29,
RETURN = TOK_MULTI_CHAR + 30,
LITERAL = TOK_MULTI_CHAR + 31,
IN = TOK_MULTI_CHAR + 32,
TRUE = TOK_MULTI_CHAR + 33,
FALSE = TOK_MULTI_CHAR + 34,
BIND = TOK_MULTI_CHAR + 37,
LOOP = TOK_MULTI_CHAR + 38,
BREAK = TOK_MULTI_CHAR + 39,
CONTINUE = TOK_MULTI_CHAR + 40,

/* Misc */
DOUBLE_DOT = TOK_MULTI_CHAR + 35,
ARROW = TOK_MULTI_CHAR + 36,

/* Lexer state */
LEX_EOF = -1,
EMPTY = -2,
INVALID = -3,
