
pod Other {
  apple: f64
}

pod Example {
  thing: i32,
  goo: f64,
  other_value: Other,
}

pod ExampleWithRef {
  thing: i32,
  goo: f64,
  other_ref: ref Other
}

pod ExampleWithTuples {
  foo: i32,
  bar: (f64, bool, str)
}

fun make_example_pod: Example {
  Example {
    .thing = 12,
    .goo = 1.3,
    .other_value = Other { .apple = 100. }
  }
}

test binding_single_level_pod_fields {
  bind { .thing, .goo } = make_example_pod();
  assert!(thing == 12);
  assert!(goo == 1.3);
}

test binding_and_renaming_single_level_pod_fields {
  bind { .thing/nice_thing, .goo/foo } = make_example_pod();
  assert!(nice_thing == 12);
  assert!(foo == 1.3);
}

test nesting_pod_field_bindings {
  bind { .thing, .other_value/{.apple} } = make_example_pod();
  assert!(thing == 12);
  assert!(apple == 100.);
}

test binding_pod_fields_through_references {
  other := Other { .apple = 666. };
  example := ExampleWithRef {
    .thing = 213,
    .goo = -12.,
    .other_ref = ref other
  };
  # .apple is now indirectly accessed
  bind { .other_ref/{.apple} } = example;
  assert!(apple == 666.);
}

test tuple_binding_within_pod_binding {
  example := ExampleWithTuples {
    .bar = (332.,false,"Hello World"),
    .foo = -1
  };

  bind { .foo, .bar/(a,b,c) } = example;
  assert!(foo == -1);
  assert!(a == 332.);
  assert!(!b);
  assert!(str_equal(c, "Hello World"));
}

test binding_pod_fields_as_refs {
  example := make_example_pod();

  bind { .thing: ref } = example;
  assert!(thing == 12 && example.thing == 12);

  thing = 42;
  assert!(thing == 42 && example.thing == 42);
}

test simple_tuple_bindings {
  # rvalue tuples
  bind (a, b, c) = (1, true, 3.);
  assert!(a == 1 && b && c == 3.);

  # lvalue tuples
  tuple := (4, false, 6.);
  bind (d, e, f) = tuple;
  assert!(d == 4 && !e && f == 6.);
}

test binding_tuple_members_as_refs {
  lvalue_tuple := (102,); # just a simple one element tuple

  bind (a: ref) = lvalue_tuple;
  assert!(a == 102 && { bind (other) = lvalue_tuple; other == 102 });

  a = 42;
  assert!(a == 42 && { bind (other) = lvalue_tuple; other == 42 });
}

test tuple_binding_assignment {
  bind (a, b, c) = (1, true, 3.);
  assert!(a == 1 && b && c == 3.);

  # binding assignment
  (a, b, c) = (231, false, 27.);
  assert!(a == 231 && !b && c == 27.);
}

test pod_binding_within_tuple_binding {
  tuple_of_pods := (make_example_pod(), make_example_pod());

  bind (boo, { .thing }) = tuple_of_pods;
  assert!(thing == 12);
}
