test adding_to_vectors {
  v := new_vec@(i32)();
  assert!(v.length == 0);
  push_back(v, 20);
  assert!(v.length == 1);
  assert!(v[0] == 20);
}

test pushing_back_till_internal_resize {
  v := new_vec@(i32)(); # has capacity of 10

  for i in 0 .. 15 {
    # will resize at i == 10
    push_back(v, i);
  }

  for i in 0 .. 15 {
    assert!(v[i] == i);
  }
}

test removing_from_vectors {
  v := new_vec@(i32)();
  # Pop back from empty vector
  assert!(v.length == 0);
  pop_back(v);
  assert!(v.length == 0);

  # Pop back from vector with element
  push_back(v, 10);
  assert!(v.length == 1);
  pop_back(v);
  assert!(v.length == 0);
}

test indexing_vectors {
  # Boring kinda already tested
  v := vec!([13,21,-43,5]);
  assert!(v[2] == -43);
}

test indexing_nested_vectors {
  v := vec!([
    vec!([4,1,2]),
    vec!([1,2])
  ]);

  assert!(v[0][0] == 4);
  assert!(v[1][0] == 1);

  # refs should be no issue
  v_ref := ref v;
  assert!(v_ref[0][0] == 4);
  assert!(v_ref[1][0] == 1);
}

test copying_a_vector_only_copies_its_internal_pointer_meta_consistant {
  v := vec!([1,2,3]);
  v_ref_copy := v; # a vector really is just a pointer to some internal data
  assert!(v.length == v_ref_copy.length);

  push_back(v_ref_copy, 99);
  # meta stays consistent
  assert!(v.length == v_ref_copy.length);
}

test creating_huge_vectors_without_crashing {
  big_v := new_vec@(i32)();
  for i in 0 .. 1000000 {
    push_back(big_v, 42);
  }

  for i in 0 .. 1000000 {
    assert!(big_v[i] == 42);
  }
}

test assigning_vector_indexes {
  v := vec!([1,2,3,4]);

  assert!(v[0] == 1);
  v[0] = 99;
  assert!(v[0] == 99);

  v_ref := ref v;
  assert!(v_ref[1] == 2);
  v_ref[1] = -42;

  assert!(v_ref[1] == -42);
}

pod Foo {
  bar: char,
  baz: i32
}

test vectors_of_aggregate_types {
  # tuples
  v := vec!([(true, 21, -1.),(false, 12, 42.9)]);

  bind (a1,b1,c1) = v[0];
  assert!(a1);
  assert!(b1 == 21);
  assert!(c1 == -1.);

  bind (a2,b2,c2) = v[1];
  assert!(!a2);
  assert!(b2 == 12);
  assert!(c2 == 42.9);

  # Pods
  v2 := vec!([
    Foo { .bar = 'A', .baz = 666 },
    Foo { .bar = 'J', .baz = -123 }]);

  bind { .bar/d1, .baz/e1 } = v2[0];
  assert!(d1 == 'A');
  assert!(e1 == 666);

  bind { .bar/d2, .baz/e2 } = v2[1];
  assert!(d2 == 'J');
  assert!(e2 == -123);
}

test filling_vectors {
  v := new_vec@(i32)();
  assert!(v.length == 0);
  fill_vec(v, 42, 100);

  assert!(v.length == 100);
  for i in 0 .. v.length {
    assert!(v[i] == 42);
  }

  # Filling a vector again overwrites existing elements
  fill_vec(v, 10, 20);
  assert!(v.length == 20);
  for i in 0 .. v.length {
    assert!(v[i] == 10);
  }
}

test mixed_array_and_vector_indexing {
  # Normal fixed arrays are well tested
  expected := [
    [1,2,3],
    [4,5,6]
  ];

  array_of_vectors := [
    vec!([1,2,3]),
    vec!([4,5,6])
  ];

  vector_of_arrays := vec!([
    [1,2,3],
    [4,5,6]
  ]);

  for i in 0 .. expected.length {
    for j in 0 .. expected[0].length {
      assert!(expected[i][j] == array_of_vectors[i][j]);
      assert!(expected[i][j] == vector_of_arrays[i][j]);
    }
  }
}

test vector_repeat_initializer {
  const_repeats := vec!([=56; 100]);
  assert!(const_repeats.length == 100);
  for i in 0 .. const_repeats.length {
    assert!(const_repeats[i] == 56);
  }

  # Mank can't figure out this is always 99
  bind (non_const_len, _) = parse_int("99");
  repeats := vec!([=42; non_const_len]);
  assert!(repeats.length == 99);
}
